[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Pat Johnson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pat Johnson. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Johnson P (2024). musePHI: Remove PHI MUSE XML files. R package version 0.2.0, https://github.com/overdodactyl/musePHI, https://overdodactyl.github.io/musePHI.","code":"@Manual{,   title = {musePHI: Remove PHI from MUSE XML files},   author = {Pat Johnson},   year = {2024},   note = {R package version 0.2.0, https://github.com/overdodactyl/musePHI},   url = {https://overdodactyl.github.io/musePHI}, }"},{"path":"/index.html","id":"musephi","dir":"","previous_headings":"","what":"Remove PHI from MUSE XML files","title":"Remove PHI from MUSE XML files","text":"musePHI package designed assist de-identification MUSE ECG XML files. enables users replace sensitive patient information within XML files placeholders, maintaining overall structure files. approach helps ensuring patient privacy allowing data used research analysis purposes.","code":""},{"path":"/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Remove PHI from MUSE XML files","text":"responsibility user accurately identify replace values need de-identified XML file. Furthermore, users must validate results ensure personal health information (PHI) inadvertently disclosed. developers musePHI assume liability misuse software inadvertent sharing PHI.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Remove PHI from MUSE XML files","text":"can install development version musePHI GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"overdodactyl/musePHI\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Remove PHI from MUSE XML files","text":"Define elements wish replace MUSE XML file: element list, name path XML node (relative RestingECG). value node replaced . Specify path existing XML file path new de-identified XML file. , call muse_deidentify: NOTE: ’s recommended save de-identified ECG data new file preserve original data.","code":"library(musePHI) replace <- list(   \"PatientDemographics/PatientLastName\" = \"LastName\",   \"PatientDemographics/PatientFirstName\" = \"FirstName\",   \"PatientDemographics/PatientID\" = \"PatientID\",   \"TestDemographics/AcquisitionDate\" = \"01-01-0001\",   \"TestDemographics/AcquisitionTime\" = \"00:00:00\" ) file <- muse_example(\"muse/muse_ecg1.xml\") output_file <- tempfile(fileext = \".xml\") muse_deidentify(file, output_file, replace)"},{"path":"/index.html","id":"parallelization","dir":"","previous_headings":"","what":"Parallelization","title":"Remove PHI from MUSE XML files","text":"users working large number XML files, parallelization can significantly speed de-identification process. recommend using furrr package efficiently parallelize workload.","code":""},{"path":"/reference/muse_deidentify.html","id":null,"dir":"Reference","previous_headings":"","what":"De-identify Muse XML Files — muse_deidentify","title":"De-identify Muse XML Files — muse_deidentify","text":"function de-identifies XML files containing patient data Muse ECG systems replacing specified elements anonymized values. function targets specific nodes within `RestingECG` element XML document based provided list elements replaced.","code":""},{"path":"/reference/muse_deidentify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"De-identify Muse XML Files — muse_deidentify","text":"","code":"muse_deidentify(file, output_file, replace)"},{"path":"/reference/muse_deidentify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"De-identify Muse XML Files — muse_deidentify","text":"file string specifying path input XML file de-identified. output_file string specifying path de-identified XML file saved. replace named list name path XML node (relative `RestingECG` root) value replacement text. example, `list(\"PatientDemographics/PatientLastName\" = \"LastName\")` replace text `PatientLastName` element within `PatientDemographics`.","code":""},{"path":"/reference/muse_deidentify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"De-identify Muse XML Files — muse_deidentify","text":"Invisibly returns path output file containing de-identified XML document. function primarily operates side effects (reading input file, modifying content, writing result new file).","code":""},{"path":"/reference/muse_deidentify.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"De-identify Muse XML Files — muse_deidentify","text":"Make sure paths provided `replace` accurately reflect structure XML documents.","code":""},{"path":[]},{"path":"/reference/muse_deidentify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"De-identify Muse XML Files — muse_deidentify","text":"","code":"# De-identify a sample Muse ECG XML file replace <- list(   \"PatientDemographics/PatientLastName\" = \"LastName\",   \"PatientDemographics/PatientFirstName\" = \"FirstName\",   \"PatientDemographics/PatientID\" = \"AnonymousID\",   \"TestDemographics/AcquisitionDate\" = \"01-01-0001\",   \"TestDemographics/AcquisitionTime\" = \"00:00:00\" ) file <- muse_example(\"muse/muse_ecg1.xml\") output_file <- tempfile(fileext = \".xml\") muse_deidentify(file, output_file, replace)"},{"path":"/reference/muse_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to sample XML file — muse_example","title":"Get path to sample XML file — muse_example","text":"musePHI comes sample files inst/extdata directory.     convenience function access ","code":""},{"path":"/reference/muse_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to sample XML file — muse_example","text":"","code":"muse_example(path = NULL)"},{"path":"/reference/muse_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to sample XML file — muse_example","text":"path Name file. NULL, example files listed.","code":""},{"path":"/reference/muse_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to sample XML file — muse_example","text":"","code":"muse_example(path = NULL) #> [1] \"muse\" muse_example(path = \"muse/muse_ecg1.xml\") #> [1] \"/home/runner/work/_temp/Library/musePHI/extdata/muse/muse_ecg1.xml\""}]
