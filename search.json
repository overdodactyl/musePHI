[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Pat Johnson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pat Johnson. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Johnson P (2024). musePHI: Remove PHI MUSE XML files. R package version 0.3.0, https://github.com/overdodactyl/musePHI, https://overdodactyl.github.io/musePHI.","code":"@Manual{,   title = {musePHI: Remove PHI from MUSE XML files},   author = {Pat Johnson},   year = {2024},   note = {R package version 0.3.0, https://github.com/overdodactyl/musePHI},   url = {https://overdodactyl.github.io/musePHI}, }"},{"path":"/index.html","id":"musephi","dir":"","previous_headings":"","what":"Remove PHI from MUSE XML files","title":"Remove PHI from MUSE XML files","text":"musePHI package designed assist de-identification MUSE ECG XML files. enables users replace sensitive patient information within XML files placeholders, maintaining overall structure files. approach helps ensuring patient privacy allowing data used research analysis purposes.","code":""},{"path":"/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Remove PHI from MUSE XML files","text":"responsibility user accurately identify replace values need de-identified XML file. Furthermore, users must validate results ensure personal health information (PHI) inadvertently disclosed. developers musePHI assume liability misuse software inadvertent sharing PHI.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Remove PHI from MUSE XML files","text":"can install development version musePHI GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"overdodactyl/musePHI\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Remove PHI from MUSE XML files","text":"function takes input XML file, output file path, list replacement patterns. replacement pattern applied text content specified XML nodes. example shows regular expressions can used replace entire nodes patterns within nodes. order capture dates date times within diagnoses sections, construct regular expressions: , construct full list replacements. \".*\" used replace entire node. Specify path existing XML file path new de-identified XML file. , call muse_deidentify: recommend use file diff viewer visually inspect replacements make sure intended changes made. done diffviewer R package:  also done via diff linux tool: NOTE: recommended save de-identified ECG data new file preserve original data.","code":"library(musePHI) # Create a string of valid month abbreviations months <- paste(toupper(month.abb), collapse = \"|\")  # Define regex replacements with specific month abbreviations dx_replace <- setNames(   list(     # Replacement for date-time format     \"XX-XXX-XXXX XX:XX\",       # Replacement for date format     \"XX-XXX-XXXX\",          # Replacement for confirmation format     \"Confirmed by XXX (XX) on XX/XX/XXXX XX:XX:XX XM\"    ),   c(     paste0(\"\\\\d{2}-(\", months, \")-\\\\d{4} \\\\d{2}:\\\\d{2}\"),     paste0(\"\\\\d{2}-(\", months, \")-\\\\d{4}\"),     \"Confirmed by [A-Za-z]+, [A-Za-z]+ \\\\(\\\\d+\\\\) on \\\\d{1,2}/\\\\d{1,2}/\\\\d{4} \\\\d{1,2}:\\\\d{2}:\\\\d{2} [APM]+\"   ) ) replace <- list(   \"/RestingECG/PatientDemographics/PatientLastName\" = list(\".*\" = \"LastName\"),   \"/RestingECG/PatientDemographics/PatientFirstName\" = list(\".*\" = \"FirstName\"),   \"/RestingECG/PatientDemographics/PatientID\" = list(\".*\" = \"PatientID\"),   \"/RestingECG/PatientDemographics/DateofBirth\" = list(\".*\" = \"XXXX\"),   \"/RestingECG/TestDemographics/AcquisitionTime\" = list(\".*\" = \"XXXX\"),   \"/RestingECG/TestDemographics/AcquisitionDate\" = list(\".*\" = \"XXXX\"),   \"/RestingECG/Diagnosis/DiagnosisStatement/StmtText\" = dx_replace,   \"/RestingECG/OriginalDiagnosis/DiagnosisStatement/StmtText\" = dx_replace ) file <- muse_example(\"muse/muse_ecg1.xml\") output_file <- tempfile(fileext = \".xml\") muse_deidentify(file, output_file, replace) diffviewer::visual_diff(file, output_file) cmd <- paste(\"diff -u\", file, output_file) res <- system(cmd, intern = TRUE) #> Warning in system(cmd, intern = TRUE): running command 'diff -u #> /apps/scratch/RtmpPXPjzJ/temp_libpath2a85bc5f742b1d/musePHI/extdata/muse/muse_ecg1.xml #> /apps/scratch/RtmpkNrgdZ/file2afdec794abf0e.xml' had status 1 cat(res, sep = \"\\n\") #> --- /apps/scratch/RtmpPXPjzJ/temp_libpath2a85bc5f742b1d/musePHI/extdata/muse/muse_ecg1.xml   2024-06-23 17:50:06.707066572 -0500 #> +++ /apps/scratch/RtmpkNrgdZ/file2afdec794abf0e.xml  2024-06-23 17:50:13.996066024 -0500 #> @@ -5,11 +5,11 @@ #>        <MuseVersion>9.0.9.18167<\/MuseVersion> #>     <\/MuseInfo> #>     <PatientDemographics> #> -      <PatientID>JAX01234<\/PatientID> #> +      <PatientID>PatientID<\/PatientID> #>        <PatientAge>60<\/PatientAge> #>        <AgeUnits>YEARS<\/AgeUnits> #>        <Gender>MALE<\/Gender> #> -      <PatientLastName>TEST 05<\/PatientLastName> #> +      <PatientLastName>LastName<\/PatientLastName> #>     <\/PatientDemographics> #>     <TestDemographics> #>        <DataType>RESTING<\/DataType> #> @@ -21,8 +21,8 @@ #>        <Priority>NORMAL<\/Priority> #>        <Location>7<\/Location> #>        <LocationName>FL Research Location<\/LocationName> #> -      <AcquisitionTime>13:15:18<\/AcquisitionTime> #> -      <AcquisitionDate>05-10-2021<\/AcquisitionDate> #> +      <AcquisitionTime>XXXX<\/AcquisitionTime> #> +      <AcquisitionDate>XXXX<\/AcquisitionDate> #>        <CartNumber>56<\/CartNumber> #>        <AcquisitionSoftwareVersion>010B<\/AcquisitionSoftwareVersion> #>        <AnalysisSoftwareVersion>241<\/AnalysisSoftwareVersion> #> @@ -88,7 +88,7 @@ #>        <\/DiagnosisStatement> #>        <DiagnosisStatement> #>           <StmtFlag>ENDSLINE<\/StmtFlag> #> -         <StmtText>10-MAY-2021 14:14,<\/StmtText> #> +         <StmtText>XX-XXX-XXXX XX:XX,<\/StmtText> #>        <\/DiagnosisStatement> #>        <DiagnosisStatement> #>           <StmtFlag>ENDSLINE<\/StmtFlag> #> @@ -97,7 +97,7 @@ #>        <\/DiagnosisStatement> #>        <DiagnosisStatement> #>           <StmtFlag>ENDSLINE<\/StmtFlag> #> -         <StmtText>Confirmed by Doe, John (123456) on 05/10/2021 1:15:09 PM<\/StmtText> #> +         <StmtText>Confirmed by XXX (XX) on XX/XX/XXXX XX:XX:XX XM<\/StmtText> #>        <\/DiagnosisStatement> #>     <\/Diagnosis> #>     <OriginalDiagnosis> #> @@ -130,7 +130,7 @@ #>        <\/DiagnosisStatement> #>        <DiagnosisStatement> #>           <StmtFlag>ENDSLINE<\/StmtFlag> #> -         <StmtText>10-MAY-2021 18:34,<\/StmtText> #> +         <StmtText>XX-XXX-XXXX XX:XX,<\/StmtText> #>        <\/DiagnosisStatement> #>        <DiagnosisStatement> #>           <StmtFlag>ENDSLINE<\/StmtFlag>"},{"path":"/index.html","id":"parallelization","dir":"","previous_headings":"","what":"Parallelization","title":"Remove PHI from MUSE XML files","text":"users working large number XML files, parallelization can significantly speed de-identification process. recommend using furrr package efficiently parallelize workload. demonstrate , process 10000 XML files sequentially parallel using 10 CPUs. First, create 10000 XML files temporary directory: Next, create list XML files create new file paths: Run muse_deidentify sequentially: Run parallel:","code":"dir <- fs::path_temp(\"xmls\") fs::dir_create(dir)  for (i in 1:10000) {   fs::file_copy(     \"inst/extdata/muse/muse_ecg1.xml\",     fs::file_temp(tmp_dir = dir, ext = \".xml\")   ) } xml_files <- fs::dir_ls(dir) deidentified_dir <- fs::path_temp(\"deidentified_xmls\") fs::dir_create(deidentified_dir) deidentified_xmls <- fs::path(deidentified_dir, fs::path_file(xml_files)) library(tictoc) tic() for (i in seq_along(xml_files)) {   muse_deidentify(xml_files[i], deidentified_xmls[i], replace) } toc() #> 44.404 sec elapsed library(furrr) #> Loading required package: future plan(multisession, workers = 10) tic() future_walk2(xml_files, deidentified_xmls, muse_deidentify, replace = replace) toc() #> 9.559 sec elapsed"},{"path":"/index.html","id":"summarizing-diagnosis-data","dir":"","previous_headings":"","what":"Summarizing Diagnosis Data","title":"Remove PHI from MUSE XML files","text":"","code":"diagnoses <- future_map_dfr(deidentified_xmls, muse_diagnoses)  diagnoses |>    dplyr::count(value, sort = TRUE) #> # A tibble: 14 × 2 #>    value                                                   n #>    <chr>                                               <int> #>  1 ENDSLINE                                           110000 #>  2 USERINSERT                                          20000 #>  3 When compared with ECG of                           20000 #>  4 XX-XXX-XXXX XX:XX,                                  20000 #>  5 , age undetermined                                  10000 #>  6 Abnormal ECG                                        10000 #>  7 Confirmed by XXX (XX) on XX/XX/XXXX XX:XX:XX XM     10000 #>  8 Lateral infarct                                     10000 #>  9 Left axis deviation                                 10000 #> 10 No significant change.                              10000 #> 11 Non-specific intra-ventricular conduction block     10000 #> 12 Previous ECG has undetermined rhythm, needs review  10000 #> 13 Ventricular-paced rhythm                            10000 #> 14 Wide QRS rhythm                                     10000"},{"path":"/reference/muse_deidentify.html","id":null,"dir":"Reference","previous_headings":"","what":"De-identify Muse XML Files — muse_deidentify","title":"De-identify Muse XML Files — muse_deidentify","text":"function de-identifies Muse ECG XML files replacing specified elements anonymized values using regex patterns.","code":""},{"path":"/reference/muse_deidentify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"De-identify Muse XML Files — muse_deidentify","text":"","code":"muse_deidentify(file, output_file, replace = list())"},{"path":"/reference/muse_deidentify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"De-identify Muse XML Files — muse_deidentify","text":"file Path input XML file de-identified. output_file Path de-identified XML file saved. replace named list name XPath XML node value list regex patterns replacements. example, `list(\"//PatientDemographics/PatientLastName\" = list(\".*\" = \"LastName\"))` replaces text `PatientLastName` element within `PatientDemographics`.#'","code":""},{"path":"/reference/muse_deidentify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"De-identify Muse XML Files — muse_deidentify","text":"Invisibly returns path output file containing de-identified XML document. function primarily operates side effects (reading input file, modifying content, writing result new file).","code":""},{"path":"/reference/muse_deidentify.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"De-identify Muse XML Files — muse_deidentify","text":"Ensure paths `replace` accurately reflect XML structure.","code":""},{"path":[]},{"path":"/reference/muse_deidentify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"De-identify Muse XML Files — muse_deidentify","text":"","code":"# De-identify a sample Muse ECG XML file   # For diagnosis statements, we will remove only specific text (like dates) # rather than the full nodes  # Create a string of valid month abbreviations months <- paste(toupper(month.abb), collapse = \"|\")  dx_replace <- setNames(   list(     \"XX-XXX-XXXX XX:XX\",  # Replacement for date-time format     \"XX-XXX-XXXX\",        # Replacement for date format     \"Confirmed by XXX (XX) on XX/XX/XXXX XX:XX:XX XM\" # Replacement for confirmation format   ),   c(     paste0(\"\\\\d{2}-(\", months, \")-\\\\d{4} \\\\d{2}:\\\\d{2}\"),     paste0(\"\\\\d{2}-(\", months, \")-\\\\d{4}\"),     \"Confirmed by [A-Za-z]+, [A-Za-z]+ \\\\(\\\\d+\\\\) on \\\\d{1,2}/\\\\d{1,2}/\\\\d{4} \\\\d{1,2}:\\\\d{2}:\\\\d{2} [APM]+\"   ) )  replace <- list(   \"/RestingECG/PatientDemographics/PatientLastName\" = list(\".*\" = \"LastName\"),   \"/RestingECG/PatientDemographics/PatientFirstName\" = list(\".*\" = \"FirstName\"),   \"/RestingECG/PatientDemographics/PatientID\" = list(\".*\" = \"PatientID\"),   \"/RestingECG/PatientDemographics/DateofBirth\" = list(\".*\" = \"XXXX\"),   \"/RestingECG/Diagnosis/DiagnosisStatement/StmtText\" = dx_replace,   \"/RestingECG/OriginalDiagnosis/DiagnosisStatement/StmtText\" = dx_replace  ) file <- muse_example(\"muse/muse_ecg1.xml\") output_file <- tempfile(fileext = \".xml\") muse_deidentify(file, output_file, replace)"},{"path":"/reference/muse_diagnoses.html","id":null,"dir":"Reference","previous_headings":"","what":"Read all diagnoses in an XML file — muse_diagnoses","title":"Read all diagnoses in an XML file — muse_diagnoses","text":"Generate data frame values `StmtFlag` `StmtText` nodes     within `OriginalDiagnosis` `Diagnosis` sections XML file.","code":""},{"path":"/reference/muse_diagnoses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read all diagnoses in an XML file — muse_diagnoses","text":"","code":"muse_diagnoses(file)"},{"path":"/reference/muse_diagnoses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read all diagnoses in an XML file — muse_diagnoses","text":"file Path input XML file","code":""},{"path":"/reference/muse_diagnoses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read all diagnoses in an XML file — muse_diagnoses","text":"","code":"file <- muse_example(\"muse/muse_ecg1.xml\") diagnoses <- muse_diagnoses(file) dplyr::count(diagnoses, value, sort = TRUE) #> # A tibble: 15 × 2 #>    value                                                        n #>    <chr>                                                    <int> #>  1 ENDSLINE                                                    11 #>  2 USERINSERT                                                   2 #>  3 When compared with ECG of                                    2 #>  4 , age undetermined                                           1 #>  5 10-MAY-2021 14:14,                                           1 #>  6 10-MAY-2021 18:34,                                           1 #>  7 Abnormal ECG                                                 1 #>  8 Confirmed by Doe, John (123456) on 05/10/2021 1:15:09 PM     1 #>  9 Lateral infarct                                              1 #> 10 Left axis deviation                                          1 #> 11 No significant change.                                       1 #> 12 Non-specific intra-ventricular conduction block              1 #> 13 Previous ECG has undetermined rhythm, needs review           1 #> 14 Ventricular-paced rhythm                                     1 #> 15 Wide QRS rhythm                                              1"},{"path":"/reference/muse_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to sample XML file — muse_example","title":"Get path to sample XML file — muse_example","text":"musePHI comes sample files inst/extdata directory.     convenience function access ","code":""},{"path":"/reference/muse_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to sample XML file — muse_example","text":"","code":"muse_example(path = NULL)"},{"path":"/reference/muse_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to sample XML file — muse_example","text":"path Name file. NULL, example files listed.","code":""},{"path":"/reference/muse_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to sample XML file — muse_example","text":"","code":"muse_example(path = NULL) #> [1] \"muse\" muse_example(path = \"muse/muse_ecg1.xml\") #> [1] \"/home/runner/work/_temp/Library/musePHI/extdata/muse/muse_ecg1.xml\""},{"path":"/news/index.html","id":"musephi-030","dir":"Changelog","previous_headings":"","what":"musePHI 0.3.0","title":"musePHI 0.3.0","text":"Use regular expressions node replacement BREAKING: replace argument muse_deidentify now expects list lists Addition muse_diagnoses Encoding indenting now maintained running muse_deidentify. Example muse file 1 now contains diagnosis statements dates","code":""}]
